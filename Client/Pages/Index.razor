@page "/"
@inject IndexState State
@inject HttpClient Client
@inject NavigationManager NavMan
@inject DialogService DialogService


<PageTitle>Blazor Bitcoin</PageTitle>
@if (State.BlockChainInfo.Result.Blocks == 0)
{
    <div class="loading-container">
        <div class="loading-shapes">
            <div class="loading-triangle"></div>
            <div class="loading-square"></div>
            <div class="loading-triangle"></div>
            <div class="loading-square"></div>
        </div>
        <div class="loading-text">
            <h1>Loading...</h1>
            <p>Please wait while we prepare the page for you.</p>
        </div>
    </div>
}
else
{
    <h1 class="text-center mb-4">Bitcon Dashboard</h1>

    <div class="row">
        <div class="col-lg-3 col-md-6">
            <RadzenCard Title="Blocks" Icon="chart-line">
                <div class="text-center">
                    <h2>@(State.BlockChainInfo.Result.Blocks)</h2>
                    <small class="text-muted">Block Height</small>
                </div>
            </RadzenCard>
        </div>
        <div class="col-lg-3 col-md-6">
            <RadzenCard Title="Difficulty" Icon="clipboard-list">
                <div class="text-center">
                    <h2>@(State.BlockChainInfo.Result.Difficulty)</h2>
                    <small class="text-muted">Difficulty</small>
                </div>
            </RadzenCard>
        </div>
        <div class="col-lg-3 col-md-6">
            <RadzenCard Title="Median Time" Icon="users">
                <div class="text-center">
                    <h2>@(State.BlockChainInfo.Result.MedianDateTime.ToString("yyyy-MM-dd HH:mm:ss"))</h2>
                    <small class="text-muted">Median Time</small>
                </div>
            </RadzenCard>
        </div>
        <div class="col-lg-3 col-md-6">
            <RadzenCard Title="Disk Size" Icon="box">
                <div class="text-center">
                    <h2>@(State.BlockChainInfo.Result.SizeOnDisk / 1073741824)GB</h2>
                    <small class="text-muted">Disk Size</small>
                </div>
            </RadzenCard>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-6">
            <RadzenCard Title="Latest Orders" Icon="clipboard-list">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Total</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>345</td>
                            <td>John Smith</td>
                            <td>$123.45</td>
                            <td>05/01/2023</td>
                        </tr>
                        <tr>
                            <td>346</td>
                            <td>Jane Doe</td>
                            <td>$45.67</td>
                            <td>05/01/2023</td>
                        </tr>
                        <tr>
                            <td>347</td>
                            <td>Bob Johnson</td>
                            <td>$98.76</td>
                            <td>04/30/2023</td>
                        </tr>
                    </tbody>
                </table>
            </RadzenCard>
        </div>
        <div class="col-lg-6">
            <RadzenCard Title="Top Products" Icon="box">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Quantity Sold</th>
                            <th>Total Sales</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Product A</td>
                            <td>10</td>
                            <td>$100.00</td>
                        </tr>
                        <tr>
                            <td>Product B</td>
                            <td>8</td>
                            <td>$80.00</td>
                        </tr>
                    </tbody>
                </table>
            </RadzenCard>
        </div>
    </div>
}


@code {
    protected override async Task OnInitializedAsync()
    {
        var timer = new System.Timers.Timer(500);
        timer.Elapsed += async (sender, e) => await RefreshBlockchainInfo();
        timer.AutoReset = true;
        timer.Enabled = true;

        await RefreshBlockchainInfo();
    }
    
    private async Task RefreshBlockchainInfo()
    {
        try
        {
            var resp = await Client.GetAsync($"{NavMan.BaseUri}api/blockchaininfo");
            resp.EnsureSuccessStatusCode();
            var content = await resp.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(content)) { return; }
            State.BlockChainInfo = JsonSerializer.Deserialize<BlockchainInfoResponse>(content);
        }
        catch (Exception ex)
        {
            LogError(ex.Message, "Error pulling blockchaininfo");
        }
        StateHasChanged();
    }

    private void LogError(string message,string title)
    {
        DialogService.Alert(message, title, new AlertOptions() { OkButtonText = "Continue" });
    }

}
