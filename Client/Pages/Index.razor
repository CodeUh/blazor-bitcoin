@page "/"
@inject IndexState State
@inject HttpClient Client
@inject NavigationManager NavMan
@inject DialogService DialogService


<PageTitle>Blazor Bitcoin</PageTitle>
@if (State.BlockChainInfo.Result.Blocks == 0)
{
    <div class="loading-container">
        <div class="loading-shapes">
            <div class="loading-triangle"></div>
            <div class="loading-square"></div>
            <div class="loading-triangle"></div>
            <div class="loading-square"></div>
        </div>
        <div class="loading-text">
            <h1>Loading...</h1>
            <p>Please wait while we prepare the page for you.</p>
        </div>
    </div>
}
else
{
    <h1 class="text-center mb-4">Bitcon Dashboard</h1>
    <div class="row">
        <div class="col-12 w-100">
            <RadzenCard Title="Latest Orders" Icon="clipboard-list">
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowVirtualization="true"  AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowPaging="false"
                            Data="@State.Blocks" TItem="BlockResponse" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Height" Filterable="false" Title="Height" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.DisplayTime" Title="Time" Frozen="true" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Confirmations" Title="Confirmations" Filterable="false" Width="80px" TextAlign="TextAlign.Center"/>
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Size" Title="Size" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Weight" Title="Weight" Width="200px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.NTx" Title="Transactions" Width="120px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Version" Title="Version" FormatString="{0:d}" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.VersionHex" Title="Version Hex" FormatString="{0:d}" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.MerkleRoot" Title="Merkle Root" Width="200px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Nonce" Title="Nonce" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Bits" Title="Bits" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Difficulty" Title="Difficulty" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.ChainWork" Title="Chain Work" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.StrippedSize" Title="StrippedSize" Width="160px" />
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </div>
    </div>
}


@code {
    public int blockHeight { get; set; } = 0;
    public int lastBlockHeight { get; set; }= 0;
    protected override async Task OnInitializedAsync()
    {
        var tRate = 80;
        var timer = new System.Timers.Timer(10000);
        timer.Elapsed += async (sender, e) => RefreshBlockchainInfo();
        timer.AutoReset = true;
        timer.Enabled = true;
        await RefreshBlockchainInfo();
        var timer2 = new System.Timers.Timer(tRate);
        timer2.Elapsed += async (sender, e) => TickTock();
        timer2.AutoReset = true;
        timer2.Enabled = true;
    }

    private async Task TickTock()
    {
        Task<HttpResponseMessage> bTask;
        if (blockHeight != lastBlockHeight)
        {
            bTask = Client.GetAsync($"{NavMan.BaseUri}api/block/{blockHeight}");
            lastBlockHeight = blockHeight;
            await bTask.ContinueWith(async t =>
            {
                t.Result.EnsureSuccessStatusCode();
                var bContent = await t.Result.Content.ReadAsStringAsync();
                State.Blocks.Add(JsonSerializer.Deserialize<BlockResponse>(bContent));
                blockHeight--;
                StateHasChanged();
            });
            await bTask;
        }
    }

    private async Task RefreshBlockchainInfo()
    {
        Task<HttpResponseMessage> bciTask;

        bciTask = Client.GetAsync($"{NavMan.BaseUri}api/blockchaininfo");

        if (blockHeight == 0 || State.Blocks.Any(b => b.Result.Height == blockHeight)) 
        {
            await bciTask.ContinueWith(async t =>
            {
                t.Result.EnsureSuccessStatusCode();
                var bciContent = await t.Result.Content.ReadAsStringAsync();
                State.BlockChainInfo = JsonSerializer.Deserialize<BlockchainInfoResponse>(bciContent);
                if (blockHeight == 0)
                {
                    blockHeight = State.BlockChainInfo.Result.Blocks;
                }
                StateHasChanged();
            }); return;
        }
        StateHasChanged();
    }

    private void LogError(string message,string title)
    {
        DialogService.Alert(message, title, new AlertOptions() { OkButtonText = "Continue" });
    }

}

