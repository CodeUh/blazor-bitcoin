@page "/"
@inject IndexState State
@inject HttpClient Client
@inject NavigationManager NavMan
@inject DialogService DialogService


<PageTitle>Blazor Bitcoin</PageTitle>
@if (State.BlockChainInfo.Result.Blocks == 0)
{
    <div class="loading-container">
        <div class="loading-shapes">
            <div class="loading-triangle"></div>
            <div class="loading-square"></div>
            <div class="loading-triangle"></div>
            <div class="loading-square"></div>
        </div>
        <div class="loading-text">
            <h1>Loading...</h1>
            <p>Please wait while we prepare the page for you.</p>
        </div>
    </div>
}
else
{
    <div class="w-100 h-100">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
   @*         <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
                <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                <RadzenLabel Text="Smooth" For="smooth" Class="rz-mr-6" />
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels" />
            </RadzenStack>*@
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Class="w-100 pt-3 rainbow" >
                <RadzenChart>
                    <RadzenAreaSeries Smooth="@smooth" Data="@State.Blocks" CategoryProperty="Result.Height" Title="NTx" ValueProperty="Result.NTx" RenderingOrder="1">
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenAreaSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsNum" />
                    <RadzenValueAxis Formatter="@FormatAsNum">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="#" />
                    </RadzenValueAxis>
                </RadzenChart>
                <RadzenChart>
                    <RadzenAreaSeries Smooth="@smooth" Data="@State.Blocks" CategoryProperty="Result.Height" Title="Size" ValueProperty="Result.Size">
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenAreaSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsNum" />
                    <RadzenValueAxis Formatter="@FormatAsNum">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="#" />
                    </RadzenValueAxis>
                </RadzenChart>
                <RadzenChart>
                    <RadzenAreaSeries Smooth="@smooth" Data="@State.Blocks" CategoryProperty="Result.Height" Title="Weight" ValueProperty="Result.Weight">
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenAreaSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsNum" />
                    <RadzenValueAxis Formatter="@FormatAsNum">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="#" />
                    </RadzenValueAxis>
                </RadzenChart>
                <RadzenChart>
                    <RadzenAreaSeries Smooth="@smooth" Data="@State.Blocks" CategoryProperty="Result.Height" Title="Stripped Size" ValueProperty="Result.StrippedSize">
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenAreaSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsNum" />
                    <RadzenValueAxis Formatter="@FormatAsNum">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="#" />
                    </RadzenValueAxis>
                </RadzenChart>
            </RadzenStack>
            <RadzenCard Title="Latest blocks" Icon="clipboard-list" >
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowVirtualization="true"  AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowPaging="false"
                            Data="@State.Blocks" TItem="BlockResponse" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Height" Filterable="false" Title="Height" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.DisplayTime" Title="Time" Frozen="true" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Confirmations" Title="Confirmations" Filterable="false" Width="80px" TextAlign="TextAlign.Center"/>
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Size" Title="Size" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Weight" Title="Weight" Width="200px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.NTx" Title="Transactions" Width="120px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Version" Title="Version" FormatString="{0:d}" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.VersionHex" Title="Version Hex" FormatString="{0:d}" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.MerkleRoot" Title="Merkle Root" Width="200px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Nonce" Title="Nonce" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Bits" Title="Bits" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.Difficulty" Title="Difficulty" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.ChainWork" Title="Chain Work" Width="160px" />
                        <RadzenDataGridColumn TItem="BlockResponse" Property="Result.StrippedSize" Title="StrippedSize" Width="160px" />
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </RadzenStack>
    </div>
}

@code {
    public int blockHeight { get; set; } = 0;
    public int lastBlockHeight { get; set; } = 0;
    public bool smooth = true;
    public bool showDataLabels = false;
    protected override async Task OnInitializedAsync()
    {
        var tRate = 80;
        var timer = new System.Timers.Timer(10000);
        timer.Elapsed += async (sender, e) => RefreshBlockchainInfo();
        timer.AutoReset = true;
        timer.Enabled = true;
        await RefreshBlockchainInfo();
        var timer2 = new System.Timers.Timer(tRate);
        timer2.Elapsed += async (sender, e) => TickTock();
        timer2.AutoReset = true;
        timer2.Enabled = true;
    }

    private async Task TickTock()
    {
        Task<HttpResponseMessage> bTask;
        if (blockHeight != lastBlockHeight)
        {
            bTask = Client.GetAsync($"{NavMan.BaseUri}api/block/{blockHeight}");
            lastBlockHeight = blockHeight;
            await bTask.ContinueWith(async t =>
            {
                t.Result.EnsureSuccessStatusCode();
                var bContent = await t.Result.Content.ReadAsStringAsync();
                State.Blocks.Add(JsonSerializer.Deserialize<BlockResponse>(bContent));
                blockHeight--;
                StateHasChanged();
            });
            await bTask;
        }
    }

    private async Task RefreshBlockchainInfo()
    {
        Task<HttpResponseMessage> bciTask;

        bciTask = Client.GetAsync($"{NavMan.BaseUri}api/blockchaininfo");

        if (blockHeight == 0 || State.Blocks.Any(b => b.Result.Height == blockHeight)) 
        {
            await bciTask.ContinueWith(async t =>
            {
                t.Result.EnsureSuccessStatusCode();
                var bciContent = await t.Result.Content.ReadAsStringAsync();
                State.BlockChainInfo = JsonSerializer.Deserialize<BlockchainInfoResponse>(bciContent);
                if (blockHeight == 0)
                {
                    blockHeight = State.BlockChainInfo.Result.Blocks;
                }
                StateHasChanged();
            }); return;
        }
        StateHasChanged();
    }

    private void LogError(string message,string title)
    {
        DialogService.Alert(message, title, new AlertOptions() { OkButtonText = "Continue" });
    }



    string FormatAsNum(object value)
    {
        return ((int)value).ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("en-US"));
    }

    string FormatAs(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMM");
        }

        return string.Empty;
    }

}

